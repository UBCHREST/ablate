name: Docker-Publish

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Allow this event to be triggered in the github ui
  workflow_dispatch:

  # Allow to be triggered from an api
  repository_dispatch:
    types: [rebuild-dependencies]

env:
  IMAGE_NAME: ablate-dependencies
  PETSC_IMAGE_NAME: ghcr.io/ubchrest/petsc-docker/petsc-build

jobs:
  build:
    strategy:
      matrix:
        arch: [ { runson: ARM64, id: -arm64 }, { runson: ubuntu-latest, id: -amd64 } ]
        compiler: [ { cc: gcc, cxx: g++, id: -gcc }, { cc: clang, cxx: clang++, id: -clang } ]
        indices: [ { index64bit: 0, id: "" },  { index64bit: 1, id: "-index64" } ]
    runs-on: ${{ matrix.arch.runson }}

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: checkout code
        uses: actions/checkout@v3

      - name: Log into registry
        run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ secrets.DOCKER_USER }} --password-stdin

      - name: Build image
        run: |
          # define the image id and petsc image id
          PETSC_IMAGE_ID=$PETSC_IMAGE_NAME${{matrix.compiler.id}}${{matrix.indices.id}}:latest
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME${{matrix.compiler.id}}${{matrix.indices.id}}${{matrix.arch.id}}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          echo IMAGE_ID=$IMAGE_ID
          echo PETSC_IMAGE_ID=$PETSC_IMAGE_ID

          # Build the image
          docker buildx build .\
            --provenance false \
            --build-arg PETSC_BASE_IMAGE=${PETSC_IMAGE_ID} \
            --push \
            --tag $IMAGE_ID:latest \
            --file DockerDependencyFile

  # Push the latest tag if everything build
  push-latest:
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [ { cc: gcc, cxx: g++, id: -gcc }, { cc: clang, cxx: clang++, id: -clang } ]
        indices: [ { index64bit: 0, id: "" },  { index64bit: 1, id: "-index64" } ]

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - uses: actions/checkout@v3

      - name: Log into registry
        run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ secrets.DOCKER_USER }} --password-stdin

      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.18.10'

      - name: Build Manifest Tool
        run: |
          git clone https://github.com/estesp/manifest-tool
          cd manifest-tool && make binary
          cd ..

      - name: Build and push manifest
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME${{matrix.compiler.id}}${{matrix.indices.id}}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
   
          # Repeat for the latest tag
          echo "image: $IMAGE_ID:latest" > config.latest.yaml
          echo "manifests:" >> config.latest.yaml
          echo "  - image: $IMAGE_ID-arm64:latest " >> config.latest.yaml
          echo "    platform: " >> config.latest.yaml
          echo "      architecture: arm64 " >> config.latest.yaml
          echo "      os: linux " >> config.latest.yaml
          echo "  - image: $IMAGE_ID-amd64:latest " >> config.latest.yaml
          echo "    platform: " >> config.latest.yaml
          echo "      architecture: amd64 " >> config.latest.yaml
          echo "      os: linux " >> config.latest.yaml
          
          # Generate the manifest and push
          manifest-tool/manifest-tool push from-spec config.latest.yaml

