name: Pull Request Workflow

on:
  # Run tests for any PRs.
  pull_request:
    branches:
      - main
jobs:
  test-matrix:
    strategy:
      fail-fast: false
      matrix:
        arch: [ { runson: ARM64, id: -arm64 }, { runson: ubuntu-latest, id: -amd64 } ]
        compiler: [ { cc: gcc, cxx: g++, id: -gcc }, { cc: clang, cxx: clang++, id: -clang } ]
        indices: [ { index64bit: 0, id: "" },  { index64bit: 1, id: "-index64" } ]
        petscConfig: [arch-ablate-opt]
        tensorFlowConfig: ["", "enabled_tf"]
    runs-on: ${{ matrix.arch.runson }}
    timeout-minutes: 90

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{matrix.tensorFlowConfig}}${{ matrix.compiler.id }}${{ matrix.indices.id }}${{ matrix.arch.id }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{matrix.tensorFlowConfig}}${{ matrix.compiler.id }}${{ matrix.indices.id }}${{ matrix.arch.id }}-buildx-

      - name: Building tests
        run: |
          ABLATE_DEPENDENCY_IMAGE=ghcr.io/ubchrest/ablate/ablate-dependencies${{matrix.compiler.id}}${{matrix.indices.id}}:latest

          docker buildx build .\
            --file DockerTestFile \
            --tag framework-test-image-${{matrix.tensorFlowConfig}}-${{ matrix.petscConfig }}${{matrix.compiler.id}}${{matrix.indices.id}} \
            --build-arg PETSC_BUILD_ARCH='${{ matrix.petscConfig }}' \
            --build-arg ENABLE_TENSOR_FLOW='${{ matrix.tensorFlowConfig }}' \
            --build-arg ABLATE_DEPENDENCY_IMAGE=$ABLATE_DEPENDENCY_IMAGE \
            --load \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache"

      - name: Get the version from the build file
        run: echo "VERSION=$(docker run --rm framework-test-image-${{matrix.tensorFlowConfig}}-${{ matrix.petscConfig }}${{matrix.compiler.id}}${{matrix.indices.id}} awk -F= '/CMAKE_PROJECT_VERSION:/ {print $NF}' CMakeCache.txt )" >> $GITHUB_ENV

      - name: Check for version
        run: |
          echo "Checking version: v$VERSION"
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "::error file=CMakeLists.txt::The version already exists!"
            exit 1
          else
            echo "version does not exist"
          fi

      - name: Run tests
        run: docker run --rm framework-test-image-${{matrix.tensorFlowConfig}}-${{ matrix.petscConfig }}${{matrix.compiler.id}}${{matrix.indices.id}}

  test:
    runs-on: ubuntu-latest
    needs: test-matrix
    if: ${{ always() }}
    steps:
      - name: Check on failures
        if: needs.test-matrix.result != 'success'
        run: |
          echo Tests unsuccessful!
          exit 1
      - run: echo All tests Successful!