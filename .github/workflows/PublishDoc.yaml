name: Deploy ABLATE.dev workflow

on:
  # Runs on pushes targeting the default branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      # checkout the latest commit of the code
      - name: Checkout
        uses: actions/checkout@v3

      # setup docker image of ablate
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-ablate-publish-doc-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ablate-publish-doc-buildx-

      - name: Build the docker image
        run: |
          docker buildx build .\
            --file DockerTestFile \
            --tag framework-doc-image \
            --load \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache"

      # copy the configured docs from the test image container
      - name: Configure documentation
        run: |
          id=$(docker create framework-doc-image)
          docker cp $id:/source/docs/ ./docs-configure
          docker rm -v $id

      # now build the pages with the standard Build with Jekyll actions
      - name: Setup Pages
        uses: actions/configure-pages@v2
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./docs-configure
          destination: ./_site

      # Upload all the artifacts
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
