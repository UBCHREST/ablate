#### Description
#This test shows the full use of the simulated two-color pyrometry code.
#Two color pyrometry is employed as a monitor and is attached to a boundary which serves as a viewing window.
#The model is based on the black body spectrum and Rayleigh scattering approximation.
#The model requires the soot mechanism to be specified in the eos.
#Using the TCP monitor requires that Orthogonal radiation is used. This is specified in the solver list.
#Orthogonal radiation detects radiation through the domain as the camera would, assuming the camera is
# relatively far from the domain.
---
environment:
  title: _tcp
  tagDirectory: true
arguments: { }
timestepper:
  name: theMainTimeStepper
  arguments:
    ts_type: rk
    ts_max_steps: 4
  io: !ablate::io::Hdf5MultiFileSerializer
    interval: 0
  domain: !ablate::domain::BoxMeshBoundaryCells
    name: simpleBoxField
    faces: [ 10, 10, 10 ]
    lower: [ -0.25 , -0.25, -0.25 ]
    upper: [ 0.25, 0.25, 0.25 ]
    simplex: false
    options:
      dm_refine: 0
      dm_plex_hash_location: true
    preModifiers:
      - !ablate::domain::modifiers::DistributeWithGhostCells
    postModifiers:
      - !ablate::domain::modifiers::TagLabelInterface
        leftRegion:
          name: interiorCells
        rightRegion:
          name: boundaryCellsFront
        boundaryFaceRegion:
          name: boundaryFacesFront
      - !ablate::domain::modifiers::GhostBoundaryCells
    fields:
      - !ablate::finiteVolume::CompressibleFlowFields
        eos: !ablate::eos::TChem  &eos
          mechFile: ../mechanisms/MMAReduced.soot.yml
      # create a conserved field to track ndd
      - !ablate::finiteVolume::ConservedField
        name: "Progress"
        components: [ "NDD" ]
  initialization:
    - !ablate::finiteVolume::fieldFunctions::Euler
      state:
        &initState
        eos: *eos
        temperature: !ablate::mathFunctions::geom::Sphere
          center: [ 0, 0, 0 ]
          radius: 0.125
          insideValues: 2000
          outsideValues: 800
        pressure: 101325.0
        velocity: [ 0.0 ]
        # the mass fractions must be specified to compute rho, e, etc.
        other: !ablate::finiteVolume::fieldFunctions::MassFractions
          # the mass fraction class allows for a subset of mass fractions to be specified. The rest are assumed zero.
          eos: *eos
          values:
            - fieldName: N2
              field: 0.724672103
            - fieldName: C(S)
              field: "1 - 0.724672103"

    # the DensityMassFractions reuses the initState to set the densityMassFractions for all species.
    - !ablate::finiteVolume::fieldFunctions::DensityMassFractions
      state: *initState

    # Set the number density to zero
    - fieldName: densityProgress
      field: "0.0"

solvers:
  - !ablate::finiteVolume::CompressibleFlowSolver
    id: vortexFlowField
    region:
      name: interiorCells
    monitors:
      - !<!ablate::monitors::MaxMinAverage>
        field: euler
      - !<!ablate::monitors::RadiationFlux>
        region:
          name: boundaryFacesFront
        radiation:
          - !ablate::radiation::OrthogonalRadiation
            id: tcp
            region:
              name: interiorCells
            properties: !ablate::eos::radiationProperties::SootSpectrumProperties
              eos: *eos
              wavelengths: [ 650.0E-9, 532.0E-9, 470.0E-9 ] # Red wavelength, Green wavelength, Blue wavelength
              bandwidths: [ 10E-9, 10E-9 , 10E-9 ]
    eos: *eos
  - !ablate::boundarySolver::BoundarySolver
    id: openBoundary
    region:
      name: boundaryCells
    fieldBoundary:
      name: boundaryFaces
    processes:
      - !ablate::boundarySolver::lodi::Inlet
        eos: *eos