# This is an example of setting up a 2D SlabBurner Simulation using the gMsh python api with a series of derived slab burner points.
### Geometry
#
#1. Open the [slabBurnerMeshGen.py](slabBurnerMeshGen.py) python
#2. Update the geometry if necessary
#3. To preview the resulting mesh run with the ```--preview``` argument
#4. Generate the [slabBurnerMesh.msh](slabBurnerMesh.msh) mesh file by running without the preview argument.
#
---
# metadata for the simulation
environment:
  title: _slabBurner2D
  tagDirectory: false
# global arguments that can be used by petsc
arguments:
  # The gmsh arguments must be global because they are used before the mesh options are parsed
  dm_plex_gmsh_use_regions: true
# set up the time stepper responsible for marching in time
timestepper:
  # time stepper specific input arguments
  arguments:
    ts_type: rk
    ts_max_time: 100000
    ts_max_steps: 3
    ts_dt: 1.0E-10
    ts_adapt_safety: 0.9
    ts_adapt_type: physicsConstrained
  # io controls how often the results are saved to a file for visualization and restart
  io:
    interval: 0 # results are saved at every 5 steps.  In real simulations this should be much larger.
  # load in the gmsh produced mesh file
  domain: !ablate::domain::MeshFile
    path: slabBurnerMesh.msh
    options:
      dm_plex_check_all: true
      dm_distribute: false # turn off default dm_distribute so that we can extrude label first
    # specify any modifications to be performed to the mesh/domain
    modifiers:
      - # GMsh/dm_plex_gmsh_use_regions creates individual labels with their separate values. By collapsing the labels to the default values
        # this input file does not need to individually specify each one for boundary conditions
        !ablate::domain::modifiers::CollapseLabels
        regions:
          - name: inlet
          - name: wall
          - name: outlet
          - name: slab
          - name: main
      - # use the newly collapsed labels to extrude the boundary.  Do not extrude the cell
        !ablate::domain::modifiers::ExtrudeLabel
        regions:
          - name: inlet
          - name: wall
          - name: outlet
          - name: slab
        # mark all the resulting boundary faces with boundaryFaces label
        boundaryRegion:
          name: boundaryFaces
        # tag the original mesh as the flow region
        originalRegion:
          name: flowRegion
        # tag the new boundary cells for easy boundary condition specifications
        extrudedRegion:
          name: boundaryCells

      # if using mpi, this modifier distributes cells
      - !ablate::domain::modifiers::DistributeWithGhostCells
        ghostCellDepth: 2

      - !ablate::domain::modifiers::SubtractLabel
        # remove the slabBurnerFace from the flowRegion
        differenceRegion:
          name: interiorFlowRegion
        minuendRegion:
          name: flowRegion
        subtrahendRegions:
          - name: slab
        incompleteLabel: true

      # it may be helpful to print the dm and labels to debug
      - !ablate::monitors::DmViewFromOptions
        options: ":$OutputDirectory/slabBurner.tex:ascii_latex"
      - !ablate::monitors::DmViewFromOptions
        options: ascii::ascii_info_detail



    fields:
      # all fields must be defined before solvers.  The ablate::finiteVolume::CompressibleFlowFields is a helper
      # class that creates the required fields for the compressible flow solver (rho, rhoE, rhoU, ...)
      - !ablate::finiteVolume::CompressibleFlowFields
        eos: !ablate::eos::TChemSoot  &eos
          mechFile: MMAReduced.yml
          options:
            # set a minimum temperature for the chemical kinetics ode integration
            thresholdTemperature: 560
        conservedFieldOptions:
          petscfv_type: leastsquares
          petsclimiter_type: vanleer
      # by adding a pressure field the code will compute and output pressure
      - !ablate::domain::FieldDescription
        name: pressure
        type: FV
        location: aux
  # set the initial conditions of the flow field
  initialization:
    - !ablate::finiteVolume::fieldFunctions::Euler
      state: &flowFieldState
        eos: *eos
        temperature: !ablate::mathFunctions::geom::Sphere
          center: [ 0.0182024,  0.007 ]
          radius: 0.005
          insideValues: 1673.15
          outsideValues: 300
        pressure: 101325.0
        velocity: "0.0, 0.0"
        other: !ablate::finiteVolume::fieldFunctions::MassFractions
          &oxMassFrac
          eos: *eos
          values:
            - fieldName: O2
              field: 1.0
    - !ablate::finiteVolume::fieldFunctions::DensityMassFractions
      state: *flowFieldState

    # Set the number density to zero
    - fieldName: densityProgress
      field: "0.0"

    - !ablate::finiteVolume::fieldFunctions::Euler
      # slab Burner
      region:
        name: slab
      state: &fuelFieldState
        eos: *eos
        temperature: 653.0 #fuel temperature
        pressure: 101325.0
        velocity: "0.0, 0.0"
        other: !ablate::finiteVolume::fieldFunctions::MassFractions
          &fuelMassFrac
          eos: *eos
          values:
            - fieldName: MMETHAC_C5H8O2 # The fuel boundary condition
              field: 1.0
    - !ablate::finiteVolume::fieldFunctions::DensityMassFractions
      region:
        name: slab
      state: *fuelFieldState
# solvers can be combined
solvers:
  # The compressible flow solver will solve the compressible flow equations over the interiorCells
  - !ablate::finiteVolume::CompressibleFlowSolver
    id: flowField
    region:
      name: interiorFlowRegion
    parameters:
      cfl: 0.45
    eos: *eos
    transport: !ablate::eos::tChemSoot::SootSpeciesTransportModel
      transport: !ablate::eos::transport::Sutherland
        eos: *eos
    evTransport: !ablate::eos::tChemSoot::SootProgressTransportModel
      transport: !ablate::eos::transport::Sutherland
        eos: *eos
    monitors:
      - !ablate::monitors::TimeStepMonitor
        interval: 25
      - !ablate::monitors::TurbFlowStats
        fields: [ velocity, temperature ]
        eos: *eos
        interval: !ablate::io::interval::DelayInterval
          interval: 25
          minimumSimulationTime: .01 #about 1 flow
      - !ablate::monitors::RadiationFlux
        id: slabFluxMonitor
        region:
          name: heatFluxMonitorFaces
        radiation:
          - !ablate::radiation::SurfaceRadiation
            id: slabMonitorTracer
            region:
              name: heatFluxMonitorRegion
            rays: 25
            properties: !ablate::eos::radiationProperties::Sum
              - !ablate::eos::radiationProperties::Zimmer
                eos: *eos
              - !ablate::eos::radiationProperties::SootMeanAbsorption
                eos: *eos

      - !ablate::monitors::MixtureFractionMonitor
        mixtureFractionCalculator: !ablate::monitors::MixtureFractionCalculator
          eos: *eos
          massFractionsFuel: *fuelMassFrac
          massFractionsOxidizer: *oxMassFrac
    additionalProcesses:
      - !ablate::finiteVolume::processes::PressureGradientScaling
        &pgs
        eos: *eos
        alphaInit: 5.0
        maxAlphaAllowed: 100.0
        domainLength: 0.165354
        log: !ablate::monitors::logs::StdOut
      - !ablate::finiteVolume::processes::Chemistry
        eos: *eos
      - !ablate::finiteVolume::processes::ThermophoreticDiffusion
        transport: !ablate::eos::transport::Sutherland
          eos: *eos
    fluxCalculator: !ablate::finiteVolume::fluxCalculator::AusmpUp
      pgs: *pgs

  - !ablate::boundarySolver::BoundarySolver
    id: inlet
    region:
      name: inlet
    fieldBoundary:
      name: boundaryFaces
    mergeFaces: true
    processes:
      - !ablate::boundarySolver::lodi::Inlet
        eos: *eos
        pgs: *pgs
        velocity: !ablate::mathFunctions::Formula
          formula: "max(0.0, min(vel, t*vel/.001)), 0.0"
          nested:
            vel: !ablate::mathFunctions::Formula
              formula: velFac*(1 - r/(dia/2.0))^(1/7)
              constants:
                dia: 0.0254
                velFac: 6.16223189034601  # .153 m3/min
              nested:
                r: !ablate::mathFunctions::Formula
                  formula: sqrt((x-xc)^2 + (y-yc)^2)
                  constants:
                    yc: 0.0127
                    xc: 0.0

  - !ablate::boundarySolver::BoundarySolver
    id: outlet
    region:
      name: outlet
    fieldBoundary:
      name: boundaryFaces
    mergeFaces: true
    processes:
      - !ablate::boundarySolver::lodi::OpenBoundary
        referencePressure: 101325.0
        maxAcousticsLength: 0.165354
        reflectFactor: 1.5
        pgs: *pgs
        eos: *eos
  - !ablate::boundarySolver::BoundarySolver
    id: walls
    region:
      name: wall
    fieldBoundary:
      name: boundaryFaces
    mergeFaces: true
    processes:
      - !ablate::boundarySolver::lodi::IsothermalWall
        eos: *eos
        pgs: *pgs

  - !ablate::boundarySolver::BoundarySolver
    id: slab boundary
    region:
      name: slab
    fieldBoundary:
      name: boundaryFaces
    processes:
      - !ablate::boundarySolver::physics::Sublimation
        latentHeatOfFusion: 840890
        transportModel: !ablate::eos::transport::Sutherland
          eos: *eos
        pgs: *pgs
        eos: *eos
        massFractions: *fuelMassFrac
        radiationInterval: 10
        radiation: !ablate::radiation::SurfaceRadiation
          id: surfaceflux
          region:
            name: flowRegion
          rays: 25
          properties: !ablate::eos::radiationProperties::Sum
            - !ablate::eos::radiationProperties::Zimmer
              eos: *eos
            - !ablate::eos::radiationProperties::SootMeanAbsorption
              eos: *eos
        emissivity: 0.9
        solidDensity: 1190.0 #density of pmma used to output reg rate
    monitors:
      - !ablate::monitors::BoundarySolverMonitor
  - !ablate::radiation::VolumeRadiation
    id: radiationSolver
    region:
      name: flowRegion
    interval: 10
    radiation: !ablate::radiation::Radiation
      id: volRad
      region:
        name: flowRegion
      rays: 5
      properties: !ablate::eos::radiationProperties::Sum
        - !ablate::eos::radiationProperties::Zimmer
          eos: *eos
        - !ablate::eos::radiationProperties::SootMeanAbsorption
          eos: *eos
