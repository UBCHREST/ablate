#include <fluxDifferencer.h>
#include <petsc.h>
#include <vector>
#include "gtest/gtest.h"

struct FluxDifferencerTestParameters {
    std::string differencerName;
    std::vector<PetscReal> Mm;
    std::vector<PetscReal> Mp;
    std::vector<PetscReal> expectedSplitPm;
    std::vector<PetscReal> expectedSplitMm;
    std::vector<PetscReal> expectedSplitPp;
    std::vector<PetscReal> expectedSplitMp;
};

class FluxDifferencerTestParametersTestFixture : public ::testing::TestWithParam<FluxDifferencerTestParameters> {};

TEST_P(FluxDifferencerTestParametersTestFixture, ShouldComputeCorrectFlux) {
    // arrange
    const auto& params = GetParam();
    const auto abs_error = 1E-6;

    FluxDifferencerFunction function;
    PetscErrorCode ierrGet = FluxDifferencerGet(params.differencerName.c_str(), &function);

    PetscReal spm, smm, spp, smp;

    // act
    for (auto i = 0; i < params.Mm.size(); i++) {
        function(params.Mm[i], &spm, &smm, params.Mp[i], &spp, &smp);

        // assert
        ASSERT_EQ(0, ierrGet);
        EXPECT_NEAR(params.expectedSplitMm[i], smm, abs_error);
        EXPECT_NEAR(params.expectedSplitPm[i], spm, abs_error);
        EXPECT_NEAR(params.expectedSplitMp[i], smp, abs_error);
        EXPECT_NEAR(params.expectedSplitPp[i], spp, abs_error);
    }
}

INSTANTIATE_TEST_SUITE_P(
    FluxDifferencer, FluxDifferencerTestParametersTestFixture,
    testing::Values((FluxDifferencerTestParameters){
        .differencerName = "ausm",
        .Mm = {1.480041,  0.279997, -1.200642, 0.018882,  -0.060300, -0.572840, -0.615688, 0.153915,  0.493958,  0.449810,  -0.167413, -1.888100, -1.081580, -1.291155, 0.337843,  1.444035,  1.193756,
               1.188390,  1.265749, -0.978824, 1.366979,  0.692454,  -1.667063, -1.933237, -1.941760, 1.022347,  -1.001763, -1.562045, 0.499208,  -0.622309, -1.721938, -1.361498, 0.109522,  -1.327420,
               -0.908342, 0.846360, -0.181193, -0.711993, -0.104916, -1.905462, -0.453772, -0.316325, -1.247843, -1.564953, 1.599274,  0.040464,  -1.163636, 0.422595,  1.268159,  -1.916728, -1.928542,
               -1.414153, 0.875342, -1.359090, 0.818423,  0.712703,  0.178809,  -1.117601, 1.902378,  1.191243,  0.066398,  -1.107217, 0.594026,  -0.420408, 0.303384,  -0.715017, 0.523791,  -1.764860,
               -0.805576, 1.871613, 1.502137,  -0.774454, 1.434058,  -0.758545, 1.757154,  0.975368,  -0.335311, -0.990568, -1.966079, 1.514872,  -1.848334, 1.277656,  1.848805,  0.281122,  -1.313932,
               1.471124,  1.895101, 0.816093,  0.035495,  -0.488125, -0.612276, -1.176953, 0.696612,  -0.268200, -1.223525, -1.582303, 0.663830,  -0.815709, -0.000800, -0.698617},
        .Mp = {-1.462543, 1.389735,  1.055098,  -0.979724, -0.018260, -0.202036, 0.606372, 1.154893, -1.624562, -1.886610, 1.343060,  -0.268932, 1.049120,  -1.991576, -0.218451,
               0.886160,  -1.084951, 1.781083,  1.605710,  -1.877640, -1.898217, 0.165650, 1.756597, -0.475183, -1.133602, -0.311534, -1.883837, -1.113233, -0.248450, -0.016751,
               -1.067662, -1.076534, -1.124876, -0.161586, -0.840874, -1.914041, 1.350312, 0.225817, 0.569177,  -1.256375, 1.970174,  1.439786,  -1.516440, -0.669219, 0.885938,
               0.844767,  1.745762,  -0.311572, 1.320143,  0.681222,  -0.786526, 0.350322, 1.529916, 1.384790,  0.021135,  0.356009,  -1.861897, -1.029040, 1.189617,  -0.342744,
               -1.307970, 0.195195,  0.812163,  0.697943,  -0.501188, -0.244153, 0.033706, 1.113770, 0.083754,  -0.426980, -0.041226, -1.881700, -1.826051, 0.813528,  1.932751,
               0.372735,  -0.425601, -1.318603, 0.008954,  1.928307,  1.082093,  0.158470, 1.441159, -1.071295, 0.055087,  1.809870,  0.311179,  -0.163473, -0.922882, 0.191985,
               1.828465,  -1.977163, 1.134621,  1.281944,  1.544718,  0.962014,  1.236560, 0.074713, 0.245431,  -0.295637},
        .expectedSplitPm = {0.000000, 0.295490, 1.000000, 0.485840, 0.545170, 0.882636, 0.903419, 0.385475, 0.159662, 0.185395, 0.624387, 1.000000, 1.000000, 1.000000, 0.256258, 0.000000, 0.000000,
                            0.000000, 0.000000, 0.999666, 0.000000, 0.063666, 1.000000, 1.000000, 1.000000, 0.000000, 1.000000, 1.000000, 0.156696, 0.906481, 1.000000, 1.000000, 0.418187, 1.000000,
                            0.993892, 0.016797, 0.634408, 0.943761, 0.578398, 1.000000, 0.816970, 0.729331, 1.000000, 1.000000, 0.000000, 0.469669, 1.000000, 0.201921, 0.000000, 1.000000, 1.000000,
                            1.000000, 0.011170, 1.000000, 0.023231, 0.055976, 0.367323, 1.000000, 0.000000, 0.000000, 0.450275, 1.000000, 0.106884, 0.796730, 0.279443, 0.944875, 0.143083, 1.000000,
                            0.973487, 0.000000, 0.000000, 0.964715, 0.000000, 0.959794, 0.000000, 0.000451, 0.742058, 0.999933, 1.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.294713, 1.000000,
                            0.000000, 0.000000, 0.023811, 0.473390, 0.837018, 0.901824, 1.000000, 0.062052, 0.696327, 1.000000, 1.000000, 0.075260, 0.976092, 0.500600, 0.938720},
        .expectedSplitMm = {0.000000,  -0.129601, -1.200642, -0.240648, -0.281059, -0.618457, -0.652612, -0.178965, -0.064020, -0.075677, -0.340713, -1.888100, -1.081580, -1.291155, -0.109613,
                            0.000000,  0.000000,  0.000000,  0.000000,  -0.978936, 0.000000,  -0.023646, -1.667063, -1.933237, -1.941760, 0.000000,  -1.001763, -1.562045, -0.062698, -0.657971,
                            -1.721938, -1.361498, -0.198238, -1.327420, -0.910443, -0.005901, -0.348805, -0.732730, -0.305210, -1.905462, -0.528363, -0.433178, -1.247843, -1.564953, 0.000000,
                            -0.230177, -1.163636, -0.083349, 0.000000,  -1.916728, -1.928542, -1.414153, -0.003885, -1.359090, -0.008243, -0.020635, -0.168589, -1.117601, 0.000000,  0.000000,
                            -0.217903, -1.107217, -0.041204, -0.504390, -0.121319, -0.735321, -0.056694, -1.764860, -0.815026, 0.000000,  0.000000,  -0.787171, 0.000000,  -0.773121, 0.000000,
                            -0.000152, -0.445764, -0.990590, -1.966079, 0.000000,  -1.848334, 0.000000,  0.000000,  -0.129196, -1.313932, 0.000000,  0.000000,  -0.008455, -0.232567, -0.553629,
                            -0.649859, -1.176953, -0.023011, -0.402083, -1.223525, -1.582303, -0.028253, -0.824200, -0.250400, -0.721325},
        .expectedSplitPp = {0.000000, 1.000000, 1.000000, 0.000306, 0.486307, 0.350535, 0.899040, 1.000000, 0.000000, 0.000000, 1.000000, 0.303164, 1.000000, 0.000000, 0.338768, 0.990649, 0.000000,
                            1.000000, 1.000000, 0.000000, 0.000000, 0.623101, 1.000000, 0.170437, 0.000000, 0.273909, 0.000000, 0.000000, 0.317497, 0.487438, 0.000000, 0.000000, 0.000000, 0.379865,
                            0.017984, 0.000000, 1.000000, 0.666484, 0.880785, 0.000000, 1.000000, 1.000000, 0.000000, 0.073014, 0.990613, 0.982862, 1.000000, 0.273883, 1.000000, 0.931884, 0.031746,
                            0.751993, 1.000000, 1.000000, 0.515849, 0.755726, 0.000000, 0.000000, 1.000000, 0.253008, 0.000000, 0.644537, 0.975195, 0.938461, 0.155582, 0.320523, 0.525270, 1.000000,
                            0.562668, 0.199226, 0.469098, 0.000000, 0.000000, 0.975542, 1.000000, 0.766605, 0.200072, 0.000000, 0.506715, 1.000000, 1.000000, 0.617857, 1.000000, 0.000000, 0.541273,
                            1.000000, 0.725851, 0.378487, 0.004346, 0.642220, 1.000000, 0.000000, 1.000000, 1.000000, 1.000000, 0.998931, 1.000000, 0.555931, 0.680378, 0.284732},
        .expectedSplitMp = {0.000000, 1.389735, 1.055098, 0.000103, 0.240954, 0.159187, 0.645108, 1.154893, 0.000000, 0.000000, 1.343060, 0.133615, 1.049120, 0.000000, 0.152705, 0.889400, 0.000000,
                            1.781083, 1.605710, 0.000000, 0.000000, 0.339685, 1.756597, 0.068858, 0.000000, 0.118496, 0.000000, 0.000000, 0.141207, 0.241695, 0.000000, 0.000000, 0.000000, 0.175734,
                            0.006330, 0.000000, 1.350312, 0.375657, 0.615579, 0.000000, 1.970174, 1.439786, 0.000000, 0.027354, 0.889190, 0.850791, 1.745762, 0.118483, 1.320143, 0.706627, 0.011393,
                            0.455843, 1.529916, 1.384790, 0.260679, 0.459690, 0.000000, 0.000000, 1.189617, 0.107996, 0.000000, 0.357123, 0.820984, 0.720753, 0.062203, 0.142826, 0.267137, 1.113770,
                            0.293631, 0.082088, 0.229812, 0.000000, 0.000000, 0.822221, 1.932751, 0.471100, 0.082483, 0.000000, 0.254497, 1.928307, 1.082093, 0.335513, 1.441159, 0.000000, 0.278302,
                            1.809870, 0.429798, 0.174944, 0.001487, 0.355207, 1.828465, 0.000000, 1.134621, 1.281944, 1.544718, 0.962374, 1.236560, 0.288752, 0.387775, 0.124032}}),
    [](const testing::TestParamInfo<FluxDifferencerTestParameters>& info) { return info.param.differencerName; });
